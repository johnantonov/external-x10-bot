import TelegramBot, { Message, SendMessageOptions } from "node-telegram-bot-api"
// import { reportService } from "../services/reportService"
import * as dotenv from 'dotenv';
import pool from "../../database/db"
import { migrations } from "../helpers/wip-quick-fix-migration";
import { users_db } from "../../database/models/users";
import axios from "axios";
import { updateConversions } from "../utils/conversions";
import { updateCommissions } from "../utils/comissions";
import { articles_db } from "../../database/models/articles";
import { startImport } from "../../database/import";
import { updateBoxTariffs } from "../utils/boxTariffs";
import { RediceService } from "../bot";
import { adminRequestOrdersOrSalesReport, adminRequestReport, adminRequestStockReport, requestPrepareReports, requestRunReportService } from "../utils/requestReport";
import { BroadcastService } from "../services/broadcastService";
import { sendBotStats } from "../services/botStatsService";
import { DateKey } from "../dto/sku&report";
import { getPath } from "../utils/parse";
import { ImagesKeys } from "../dto/images";

dotenv.config();

const helpInfo = `
/admin__help - –∫–æ–º–∞–Ω–¥—ã

/admin__send_all_message_{text msg} - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
/admin__send_filter_message_{text msg} - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
/admin__forward_message - –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
/admin__forward_filter_message - –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

<b>üìÇ –û–¢–ß–ï–¢–´</b>
/admin__prepare_report_service - –∑–∞–ø—É—Å–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞
/admin__get_report_for_{id} - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/admin__get_stock_report_for_{id} - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Å–∫–ª–∞–¥–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–π—á–∞—Å
/admin__get_orders_report_for_{id}_date_{date (yyyy-mm-dd)} - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º –∑–∞ –¥–∞—Ç—É
/admin__get_sales_report_for_{id}_date_{date (yyyy-mm-dd)} - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –≤—ã–∫—É–ø–∞–º –∑–∞ –¥–∞—Ç—É
/admin__get_returns_report_for_{id}_date_{date (yyyy-mm-dd)} - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –≤–æ–∑–≤—Ä–∞—Ç–∞–º –∑–∞ –¥–∞—Ç—É

/admin__send_all_data - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
/admin__get_mp_conversions - –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∫–æ–Ω–≤–µ—Ä—Å–∏–π
/admin__get_mp_commissions - –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∫–æ–º–∏—Å—Å–∏–π
/admin__get_mp_tariffs - –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É —Ç–∞—Ä–∏—Ñ–æ–≤ –∫–æ—Ä–æ–±–æ–≤
/admin__db_migrate_{N} - –∑–∞–ø—É—Å–∫ N-–º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
/admin__clean_db_{tableName} - –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
/admin__delete_user_{id} - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users

/admin__clear_last_report_time_{id} - –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞
/admin__clear_last_report_time_all - –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞ —É –≤—Å–µ—Ö

<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>
/admin__send_base_stats_to_webapp - –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ–±–∞–ø–ø
/admin__get_stats - –≤—ã–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —á–∞—Ç

<b>‚öôÔ∏è</b>
/admin__my_id - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π tg id
/admin__check_state - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —é–∑–µ—Ä —Å—Ç–∞—Ç—É—Å –≤ —Ä–µ–¥–∏—Å–µ
/admin__clear_state - –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —é–∑–µ—Ä —Å—Ç–∞—Ç—É—Å –≤ —Ä–µ–¥–∏—Å–µ
/admin__get_article_{id}_{article} - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É

<b>‚ùóÔ∏è TECH</b>
/admin__start_import - –Ω–∞—á–∞—Ç—å –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
/admin__run_report_service - –∑–∞–ø—É—Å–∫ —Ä–µ–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–π —á–∞—Å
/admin__get_image_{type} - –≤—ã—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ, –≤ –æ—Ç—á–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –ª–æ–≥ message
`

export async function handleAdminCommand(chat_id: number, msg: Message, bot: TelegramBot, mediaGroup?: any) {
  try {

    const adminChatIds = process.env.ADMIN_CHAT ? process.env.ADMIN_CHAT.split(',').map(Number) : [];
    const command = msg?.text ? msg.text : msg?.caption

    if (!command) {
      return console.error(`There is no admin command`)
    }

    if (!process.env.ADMIN_CHAT) {
      return console.error(`Error to getting admins from the env`)
    }

    if (!adminChatIds.includes(chat_id)) {
      await bot.sendMessage(chat_id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
      return console.error(`Chat id ${chat_id} does not have access.`);
    }

    const action = command.split('__')[1]
    console.log('admin handler action: ', action)

    if (action === 'run_report_service') {
      console.log('admin started report serivce')
      requestRunReportService();
    }

    if (action.startsWith('get_report_for')) {
      const user_chat_id = action.split('get_report_for_')[1];

      if (!chat_id) {
        await bot.sendMessage(chat_id, '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ ID');
        return;
      }

      const res = await bot.sendMessage(chat_id, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + user_chat_id);
      adminRequestReport(chat_id, user_chat_id, res.message_id)
    }

    if (action.startsWith('get_stock_report_for')) {
      const user_chat_id = action.split('get_stock_report_for_')[1];

      if (!chat_id) {
        await bot.sendMessage(chat_id, '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ ID');
        return;
      }

      const res = await bot.sendMessage(chat_id, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + user_chat_id);
      adminRequestStockReport(chat_id, user_chat_id, res.message_id)
    }

    if (action.startsWith('get_orders_report_for')) {
      const splittedPart = action.split('get_orders_report_for_')[1];
      const [user_chat_id, date] = splittedPart.split('_date_')

      if (!chat_id) {
        await bot.sendMessage(chat_id, '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ ID');
        return;
      }

      const res = await bot.sendMessage(chat_id, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + user_chat_id);
      adminRequestOrdersOrSalesReport(chat_id, user_chat_id, res.message_id, date as DateKey, 'orders')
    }

    if (action.startsWith('get_sales_report_for')) {
      const splittedPart = action.split('get_sales_report_for_')[1];
      const [user_chat_id, date] = splittedPart.split('_date_')

      if (!chat_id) {
        await bot.sendMessage(chat_id, '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ ID');
        return;
      }

      const res = await bot.sendMessage(chat_id, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + user_chat_id);
      adminRequestOrdersOrSalesReport(chat_id, user_chat_id, res.message_id, date as DateKey, 'sales')
    }

    if (action.startsWith('get_returns_report_for')) {
      const splittedPart = action.split('get_returns_report_for_')[1];
      const [user_chat_id, date] = splittedPart.split('_date_')

      if (!chat_id) {
        await bot.sendMessage(chat_id, '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ ID');
        return;
      }

      const res = await bot.sendMessage(chat_id, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + user_chat_id);
      adminRequestOrdersOrSalesReport(chat_id, user_chat_id, res.message_id, date as DateKey, 'returns')
    }

    // if (action.startsWith('send_all_message')) {
    //   const message = action.split('send_all_message_')[1];
      
    //   if (!message) {
    //     await bot.sendMessage(chat_id, '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
    //     return;
    //   }
    //   try {
    //     if (mediaGroup) {
    //       await BroadcastService.sendMediaGroupToAllUsers(mediaGroup, message);
    //     } else {
    //       await BroadcastService.sendMessageToAllUsers(message);
    //     }
  
    //     await bot.sendMessage(chat_id, '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.');
    //   } catch (error) {
    //     console.error('Error sending message to all users: ', error);
    //     await bot.sendMessage(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    //   }
    // }

    if (action.startsWith('send_filter_message')) {
      const message = action.split('send_filter_message_')[1];
      
      if (!message) {
        await bot.sendMessage(chat_id, '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
        return;
      }
      try {
        if (mediaGroup) {
          await BroadcastService.sendMediaGroupToFilteredUsers(mediaGroup, message);
        } else {
          await BroadcastService.sendMessageToFilteredUsers(message);
        }
  
        await bot.sendMessage(chat_id, '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.');
      } catch (error) {
        console.error('Error sending message to all users: ', error);
        await bot.sendMessage(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
      }
    }

    // STATISTICS
    if (action === 'send_base_stats_to_webapp') {
      console.log('admin started sending stats to webapp')
      sendBotStats()
    }

    if (action === 'get_stats') {
      await bot.sendMessage(chat_id, `–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${(await users_db.getAllUsers())?.length}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å wb_api_key: ${(await users_db.getReportUsers())?.length}`);
    }

    // ---------------
    if (action === 'prepare_report_service') {
      console.log('admin started preparing report serivce')
      requestPrepareReports()
    }

    if (action === 'forward_message') {
      try {
        console.log('admin started preparing report serivce')
  
        if (!msg.reply_to_message) {
          await bot.sendMessage(chat_id, '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å.');
          return;
        }
  
        const messageId = msg.reply_to_message.message_id;

        await BroadcastService.forwardMessageToAllUsers(chat_id, messageId);
        await bot.sendMessage(chat_id, '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.');
      } catch (error) {
        console.error('Error forwarding message by admin: ', error);
        await bot.sendMessage(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
      }
    }

    if (action === 'forward_filter_message') {
      try {
        console.log('admin started preparing report serivce')
  
        if (!msg.reply_to_message) {
          await bot.sendMessage(chat_id, '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å.');
          return;
        }
  
        const messageId = msg.reply_to_message.message_id;

        await BroadcastService.forwardMessageToFilteredUsers(chat_id, messageId);
        await bot.sendMessage(chat_id, '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.');
      } catch (error) {
        console.error('Error forwarding message by admin: ', error);
        await bot.sendMessage(chat_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
      }
    }

    if (action.startsWith('clean_db')) {
      const db = action.split('db_')[1];
      if (db) {
        pool.query(`DELETE FROM ${db}`, (err, result) => {
          if (err) {
            console.error(`Failed to delete data from ${db}:`, err);
          } else {
            console.log(`All data deleted from ${db} by admin`);
          }
        });
      } else {
        console.error('No table specified for deletion.');
      }
    }

    if (action.startsWith('delete_user')) {
      const user = action.split('delete_user_')[1];
      if (user) {
        pool.query(`DELETE FROM users WHERE chat_id = ${user}`, (err, result) => {
          if (err) {
            console.error(`Failed to delete ${user}:`, err);
          } else {
            console.log(`delete ${user} by admin`);
          }
        });
      } else {
        console.error('No table specified for deletion.');
      }
    }

    if (action.startsWith('help')) {
      await bot.sendMessage(chat_id, helpInfo, { parse_mode: "HTML" })
    }

    // work in progress, now all migrations are added to the folder sql migrations and helpers/wip 
    if (action.startsWith('db_migrate')) {
      const step = +action.split('migrate_')[1];
      try {
        for (const m of migrations[step]) {
          await pool.query(m);
        }
        console.log(`Migration step ${step} completed successfully.`);
      } catch (e) {
        console.error('Error during migration process:', e);
      }
    }

    // send all data to spreadsheet db
    if (action.startsWith('send_all_data')) {
      const data = await users_db.getAllData();
      console.log('sending response with all data...')

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      axios.post(process.env.SS_ALL_DATA_URL!, data, {
        headers: {
          'Content-Type': 'application/json',
        },
      }).then(res => {
        console.log('successfully send all data: ', res.status)
      }).catch(error => {
        console.error('Error sending all data: ', error);
      });
    }

    // get mp conversions data 
    if (action.startsWith('get_mp_conversions')) {
      console.log('start to updating');
      await updateConversions();
    }

    // get mp commissions data 
    if (action.startsWith('get_mp_commissions')) {
      console.log('start to updating');
      await updateCommissions();
    }

    if (action.startsWith('get_mp_tariffs')) {
      console.log('start to updating')
      await updateBoxTariffs();
    }

    if (action.startsWith('check_state')) {
      console.log('start to checking state')
      const state = await RediceService.getUserState(chat_id)
      await bot.sendMessage(chat_id, `${state}`);
    }

    if (action.startsWith('clear_state')) {
      console.log('start to clearing state')
      const state = await RediceService.deleteUserState(chat_id)
      await bot.sendMessage(chat_id, `${state}`);
    }

    if (action.startsWith('my_id')) {
      await bot.sendMessage(chat_id, `${chat_id}`);
    }

    if (action.startsWith('get_image')) {
      const imagePath = action.split('image_')[1] as ImagesKeys;
      const path = getPath(imagePath, true)

      const answer = await bot.sendPhoto(chat_id, imagePath, { parse_mode: 'HTML', disable_notification: true });
      const log = JSON.stringify(answer)
      console.log(log)
    }


    // get mp commissions data 
    if (action.startsWith('clear_last_report_time')) {
      console.log('start to clearing')
      const id = action.split('time_')[1];

      if (id === 'all') {
        await users_db.clearLastReportTime()
      }

      await users_db.clearLastReportTime(+id)
    }

    if (action.startsWith('get_article')) {
      const id = action.split('_')[2]
      const article = action.split('_')[3]

      const msg = await articles_db.getArticle(+id, article)

      await bot.sendMessage(chat_id, `${JSON.stringify(msg)}`)
    }

    // ! TECH
    if (action.startsWith('start_import')) {
      console.log('import started by admin')
      startImport()
    }

  } catch (e) {
    console.error('error in admin handler: ' + e)
  }
}

